import { Collection, WorkspaceManifest } from '@shared/types';
import { ensureFolderExists } from './util/fs';
import * as vscode from 'vscode';
import yaml from 'yaml';
import semver from 'semver';

const STORAGE_FOLDER = 'agin-requests';
const VERSION = '1.0.0';

const databaseReadme = `# Agin Requests Database

This database was auto-generated by [Agin Requests](https://requests.agin.rocks). If you want to collaborate, you should include this directory in your version control system. You can learn more about Agin Requests Databases [here](https://docs.requests.agin.rocks/features/git-sync).`;

export class WorkspaceManager {
    private folder?: vscode.WorkspaceFolder;
    private baseUri?: vscode.Uri;
    private manifest?: WorkspaceManifest;
    private collections?: Collection[];

    constructor() {

    }

    // Checks if the workspace is avaliable (for instance if the user has opened a folder)
    isAvaliable() {
        return !!vscode.workspace.workspaceFolders;
    }

    async setFolder(folder: vscode.WorkspaceFolder) {
        this.folder = folder;
        this.baseUri = vscode.Uri.joinPath(folder.uri, STORAGE_FOLDER);
        console.log(this.baseUri);


        await ensureFolderExists(this.baseUri);
        await this.loadManifest();
        await this.loadCollections();
    }

    private async loadManifest() {
        if (!this.baseUri) return;

        const readmePath = vscode.Uri.joinPath(this.baseUri, 'README.md');
        await vscode.workspace.fs.writeFile(readmePath, Buffer.from(databaseReadme));

        let manifest: WorkspaceManifest | undefined = undefined;
        let manifestPath: vscode.Uri | undefined = undefined;
        try {
            manifestPath = vscode.Uri.joinPath(this.baseUri, 'manifest.yaml');
            const file = await vscode.workspace.fs.readFile(manifestPath);

            manifest = yaml.parse(file.toString());
        } catch (error) {
            if (error instanceof vscode.FileSystemError) {
                if (error.code == 'FileNotFound' && manifestPath) {
                    manifest = {
                        extensionVersion: VERSION,
                        databaseVersion: 1,
                    };

                    const manifestYaml = yaml.stringify(manifest);
                    await vscode.workspace.fs.writeFile(manifestPath, Buffer.from(manifestYaml));
                }
            }
        }

        if (!manifest) return vscode.window.showErrorMessage('Unable to load manifest');

        if (manifest.databaseVersion > 1) return vscode.window.showErrorMessage('Unsupported database version. Please update Agin Requests in order to open this workspace.');
        if (semver.gt(manifest.extensionVersion, VERSION)) vscode.window.showWarningMessage('This workspace was saved with a newer version of Agin Requests. Some features may not be avaliable.');

        this.manifest = manifest;
        console.log({ manifest });

        return manifest;
    }

    private async loadCollections() {
        if (!this.baseUri) return;

        const collectionsPath = vscode.Uri.joinPath(this.baseUri, 'collections');
        await ensureFolderExists(collectionsPath);

    }

    private async readCollection(uri: vscode.Uri): Promise<Collection | undefined> {
        if (!this.baseUri) return;

        const manifestPath = vscode.Uri.joinPath(uri, 'collection.yaml');
        // const manifest = yaml.parse(await )
        // TODO: Finish

        const items = await vscode.workspace.fs.readDirectory(uri);
        const collectionNames = items.filter(([filename, type]) => type == vscode.FileType.Directory).map(x => x[0]);

        for (const col of collectionNames) {
            console.log(col);

        }
    }
}